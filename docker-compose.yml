services:
  # MongoDB 개발 환경
  mongodb:
    image: mongo:6.0
    container_name: korea_mongodb_dev
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
    ports:
      - "27017:27017"
    volumes:
      - ./volumes/mongodb/data:/data/db
      - ./volumes/mongodb/configdb:/data/configdb
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - korea_api_network

  # Redis 개발 환경
  redis:
    image: redis:7-alpine
    container_name: korea_redis_dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - ./volumes/redis/data:/data
    networks:
      - korea_api_network

  # API 서버 개발 환경 (hot reload)
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: korea_api_dev
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - MONGODB_URL=mongodb://api_user:api_password@mongodb:27017/korea_public_api
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_NAME=${DATABASE_NAME:-korea_public_api}
      - PUBLIC_DATA_API_KEY=${PUBLIC_DATA_API_KEY}
      - PUBLIC_DATA_API_KEY_DECODE=${PUBLIC_DATA_API_KEY_DECODE}
      - API_BASE_URL=${API_BASE_URL}
      - DEBUG=True
      - LOG_LEVEL=DEBUG
    volumes:
      - ./app:/app/app:ro  # 코드 변경 감지를 위한 볼륨 마운트
      - ./logs:/app/logs
    depends_on:
      - mongodb
      - redis
    networks:
      - korea_api_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker 개발 환경
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: korea_celery_worker_dev
    restart: unless-stopped
    command: celery -A app.core.celery worker --loglevel=debug
    environment:
      - MONGODB_URL=mongodb://api_user:api_password@mongodb:27017/korea_public_api
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_NAME=${DATABASE_NAME:-korea_public_api}
      - PUBLIC_DATA_API_KEY=${PUBLIC_DATA_API_KEY}
      - PUBLIC_DATA_API_KEY_DECODE=${PUBLIC_DATA_API_KEY_DECODE}
      - DEBUG=True
      - LOG_LEVEL=DEBUG
    volumes:
      - ./app:/app/app:ro
      - ./logs:/app/logs
    depends_on:
      - mongodb
      - redis
    networks:
      - korea_api_network

  # Celery Beat 개발 환경
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: korea_celery_beat_dev
    restart: unless-stopped
    command: celery -A app.core.celery beat --loglevel=debug
    environment:
      - MONGODB_URL=mongodb://api_user:api_password@mongodb:27017/korea_public_api
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_NAME=${DATABASE_NAME:-korea_public_api}
      - PUBLIC_DATA_API_KEY=${PUBLIC_DATA_API_KEY}
      - PUBLIC_DATA_API_KEY_DECODE=${PUBLIC_DATA_API_KEY_DECODE}
      - DEBUG=True
      - LOG_LEVEL=DEBUG
    volumes:
      - ./app:/app/app:ro
      - ./logs:/app/logs
    depends_on:
      - mongodb
      - redis
    networks:
      - korea_api_network

  # Celery Flower 개발 환경 (모니터링) - 현재 비활성화됨
  # 활성화하려면 requirements.txt에 flower==2.0.1 추가하고 이미지 재빌드 필요
  # flower:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #     target: development
  #   container_name: korea_celery_flower_dev
  #   restart: unless-stopped
  #   command: python -m celery flower --broker=redis://redis:6379/0 --port=5555
  #   ports:
  #     - "5555:5555"
  #   environment:
  #     - MONGODB_URL=mongodb://api_user:api_password@mongodb:27017/korea_public_api
  #     - REDIS_URL=redis://redis:6379/0
  #     - DATABASE_NAME=${DATABASE_NAME:-korea_public_api}
  #     - PUBLIC_DATA_API_KEY=${PUBLIC_DATA_API_KEY}
  #     - PUBLIC_DATA_API_KEY_DECODE=${PUBLIC_DATA_API_KEY_DECODE}
  #     - DEBUG=True
  #     - LOG_LEVEL=DEBUG
  #   volumes:
  #     - ./logs:/app/logs
  #   depends_on:
  #     - redis
  #   networks:
  #     - korea_api_network

networks:
  korea_api_network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local