{
  "interface_compliance": [
    {
      "check": "AnnouncementService inherits from BaseService",
      "status": "PASS",
      "details": "Service properly inherits from base class"
    },
    {
      "check": "AnnouncementService implements all abstract methods",
      "status": "FAIL",
      "details": "Missing methods: ['_delete_item', '_fetch_by_id', '_fetch_list', '_save_new_item', '_save_updated_item', '_transform_to_domain', '_transform_to_response']"
    },
    {
      "check": "AnnouncementService implements domain interface",
      "status": "PASS",
      "details": "Implements IAnnouncementService"
    },
    {
      "check": "BusinessService inherits from BaseService",
      "status": "PASS",
      "details": "Service properly inherits from base class"
    },
    {
      "check": "BusinessService implements all abstract methods",
      "status": "FAIL",
      "details": "Missing methods: ['_delete_item', '_fetch_by_id', '_fetch_list', '_save_new_item', '_save_updated_item', '_transform_to_domain', '_transform_to_response']"
    },
    {
      "check": "BusinessService implements domain interface",
      "status": "PASS",
      "details": "Implements IBusinessService"
    },
    {
      "check": "ContentService inherits from BaseService",
      "status": "PASS",
      "details": "Service properly inherits from base class"
    },
    {
      "check": "ContentService implements all abstract methods",
      "status": "FAIL",
      "details": "Missing methods: ['_delete_item', '_fetch_by_id', '_fetch_list', '_save_new_item', '_save_updated_item', '_transform_to_domain', '_transform_to_response']"
    },
    {
      "check": "ContentService implements domain interface",
      "status": "FAIL",
      "details": "Does not implement IContentService"
    },
    {
      "check": "StatisticsService inherits from BaseService",
      "status": "PASS",
      "details": "Service properly inherits from base class"
    },
    {
      "check": "StatisticsService implements all abstract methods",
      "status": "FAIL",
      "details": "Missing methods: ['_delete_item', '_fetch_by_id', '_fetch_list', '_save_new_item', '_save_updated_item', '_transform_to_domain', '_transform_to_response']"
    },
    {
      "check": "StatisticsService implements domain interface",
      "status": "PASS",
      "details": "Implements IStatisticsService"
    }
  ],
  "solid_principles": [
    {
      "check": "Service has focused responsibility",
      "status": "WARNING",
      "details": "Service has 20 public methods (may be doing too much)"
    },
    {
      "check": "BaseService is open for extension",
      "status": "PASS",
      "details": "Abstract base class with abstract methods"
    },
    {
      "check": "Services are substitutable for BaseService",
      "status": "PASS",
      "details": "Service properly inherits from BaseService"
    },
    {
      "check": "Interfaces are focused and segregated",
      "status": "PASS",
      "details": "Domain interface has 10 methods"
    },
    {
      "check": "Services depend on abstractions",
      "status": "PASS",
      "details": "Repository dependency injection found"
    }
  ],
  "design_patterns": [
    {
      "check": "Template Method Pattern implemented",
      "status": "PASS",
      "details": "BaseService uses template method pattern"
    },
    {
      "check": "Repository Pattern interfaces exist",
      "status": "FAIL",
      "details": "Repository interfaces not found"
    },
    {
      "check": "CQRS Pattern implemented",
      "status": "PASS",
      "details": "Command and Query buses exist"
    },
    {
      "check": "Event-Driven Architecture implemented",
      "status": "PASS",
      "details": "Domain events and event bus exist"
    },
    {
      "check": "Factory Pattern implemented",
      "status": "PASS",
      "details": "Factory functions for service creation exist"
    }
  ],
  "error_handling": [
    {
      "check": "Services implement exception handling",
      "status": "PASS",
      "details": "Try-catch blocks found in service code"
    },
    {
      "check": "Services implement logging",
      "status": "FAIL",
      "details": "No logging implementation found"
    }
  ],
  "performance": [
    {
      "check": "Services use async/await pattern",
      "status": "PASS",
      "details": "Found 32 async methods"
    }
  ],
  "overall_score": 68.0
}