# Task ID: 1
# Title: 알림 도메인(Alerts) 스캐폴딩 구축
# Status: done
# Dependencies: None
# Priority: high
# Description: MongoDB 컬렉션 설계와 DDD 구조를 기반으로 알림 도메인의 기본 아키텍처를 구성하되, 실행에 영향을 주지 않도록 라우터는 미장착 상태로 유지합니다.
# Details:
1. MongoDB 컬렉션 설계:
- alert_subscriptions: 사용자별 알림 구독 설정 (userId, alertType, preferences, isActive, createdAt, updatedAt)
- notifications: 발송된 알림 기록 (subscriptionId, message, type, status, scheduledAt, sentAt)
- delivery_logs: 전송 로그 및 실패 기록 (notificationId, channel, status, attempts, errorMessage, deliveredAt)

2. DDD 디렉터리 구조 생성:
- app/domains/alerts/entities/ (Alert, Subscription, DeliveryLog 엔티티)
- app/domains/alerts/repositories/ (인터페이스 및 MongoDB 구현체)
- app/domains/alerts/services/ (도메인 서비스 로직)
- app/domains/alerts/tasks/ (백그라운드 작업)
- app/domains/alerts/schemas/ (유효성 검사 스키마)
- app/domains/alerts/routes/ (API 라우터, 미장착 상태)

3. 기본 파일 생성:
- 각 엔티티 클래스 정의 (TypeScript 인터페이스)
- Repository 패턴 구현 (CRUD 기본 메서드)
- 도메인 서비스 스켈레톤 (구독 관리, 알림 발송)
- Joi 또는 Zod 스키마 정의
- Express 라우터 파일 (주석 처리된 엔드포인트)

# Test Strategy:
1. 디렉터리 구조 검증: app/domains/alerts 하위 모든 폴더와 파일이 올바르게 생성되었는지 확인
2. TypeScript 컴파일 검증: 모든 생성된 파일이 문법 오류 없이 컴파일되는지 확인
3. MongoDB 스키마 검증: 컬렉션 스키마가 인덱스와 함께 올바르게 정의되었는지 확인
4. 의존성 주입 테스트: Repository와 Service 간 의존성이 올바르게 설정되었는지 확인
5. 라우터 미장착 확인: 메인 앱에서 alerts 라우터가 등록되지 않았는지 확인하여 실행 영향 없음을 보장
