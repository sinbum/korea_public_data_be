# Task ID: 3
# Title: Celery 비동기 처리 시스템 구현: 매칭/알림 플로우 및 재시도/백오프/레이트리밋
# Status: in-progress
# Dependencies: 1, 2
# Priority: high
# Description: Celery를 활용한 비동기 작업 처리 시스템을 구현하여 문서 매칭, 알림 전송, 재시도 로직, 백오프 전략, 레이트 제한 기능을 제공합니다.
# Details:
1. Celery 기본 설정 및 구성:
- Redis/RabbitMQ 브로커 설정 및 연결
- celery.py 설정 파일: 워커 설정, 라우팅, 직렬화 옵션
- 환경별 설정 분리: 개발/운영 환경 구성

2. match_and_enqueue 작업 구현:
- @celery.task 데코레이터를 활용한 신규 문서 배치 처리
- 이벤트 기반 매칭 로직: 문서 등록/수정 시 자동 트리거
- 매칭 결과를 바탕으로 알림 큐에 작업 추가
- 배치 크기별 처리: 대량 문서 처리 시 청크 단위 분할

3. send_notification 작업 구현:
- 이메일 채널 통합: SMTP/SES 설정 및 템플릿 시스템
- 알림 타입별 처리: 즉시/예약/배치 알림 지원
- HTML/텍스트 이메일 템플릿 렌더링
- 전송 상태 추적 및 로깅

4. 재시도/백오프/레이트리밋 시스템:
- @retry 데코레이터: 지수 백오프 (1s, 2s, 4s, 8s, 16s)
- max_retries=5, countdown 설정
- 레이트 제한: 분당 알림 전송 제한 (100/min)
- 실패 처리: 최종 실패 시 DLQ(Dead Letter Queue) 이동
- 모니터링: Celery Flower 대시보드 설정

# Test Strategy:
1. Celery 워커 시작 테스트: celery worker 명령으로 정상 시작 확인
2. 작업 등록 테스트: match_and_enqueue.delay() 호출 시 작업이 큐에 추가되는지 확인
3. 매칭 작업 테스트: 신규 문서 등록 시 매칭 로직이 올바르게 실행되는지 검증
4. 이메일 전송 테스트: send_notification 작업으로 실제 이메일이 발송되는지 확인
5. 재시도 로직 테스트: 의도적 실패 상황에서 지수 백오프가 적용되는지 검증
6. 레이트 제한 테스트: 분당 전송 한도 초과 시 작업이 지연되는지 확인
7. DLQ 테스트: 최대 재시도 횟수 초과 시 작업이 DLQ로 이동하는지 확인
8. 성능 테스트: 대량 작업 처리 시 워커 성능 및 메모리 사용량 모니터링
9. Flower 모니터링: 웹 UI에서 작업 상태 및 통계 확인

# Subtasks:
## 1. 조건부 Celery 라우팅/스케줄/include 구성 [done]
### Dependencies: None
### Description: ALERTS_ENABLED=true 일 때만 alerts 큐/스케줄 활성화
### Details:


## 2. 지수 백오프/재시도 기본 설정 [done]
### Dependencies: None
### Description: send_notification에 autoretry + backoff 적용
### Details:


## 3. 이메일 채널 DEV 어댑터 연결 [done]
### Dependencies: None
### Description: EmailClient(dev)로 사용자 이메일 전송 로그 방식 구현
### Details:


## 4. 레이트리밋/사용자 일일 상한 적용 [pending]
### Dependencies: None
### Description: Redis 토큰버킷 기반 전송 제한 적용
### Details:


